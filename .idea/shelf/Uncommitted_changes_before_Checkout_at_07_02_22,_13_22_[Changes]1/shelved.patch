Index: graph_analysis/network_visualisation.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+># import\nimport os\n\nimport numpy as np\n\nfrom brian2 import second, prefs, NeuronGroup, Synapses\n\nfrom plotting_functions.rcn_spiketrains_histograms import plot_rcn_spiketrains_histograms\n\nprefs.codegen.target = 'numpy'\n\n# Helper modules\nfrom helper_functions.recurrent_competitive_network import RecurrentCompetitiveNet\nfrom plotting_functions.plot import *\nfrom plotting_functions.graphing import *\nfrom plotting_functions.spike_synchronisation import *\n\nclean_folder()\n\n# 1 ------ initializing/running network ------\n\nplasticity_rule = 'LR3'\nparameter_set = '2.0'\n# plasticity_rule = 'LR4'\n# parameter_set = '2.0'\n\nrcn = RecurrentCompetitiveNet(\n        plasticity_rule=plasticity_rule,\n        parameter_set=parameter_set,\n        t_run=3 * second,\n        save_path=os.getcwd() )\n\nrcn.stimulus_pulse = True\n\nrcn.net_init()\n\nneurons_subsample = 0.05\nedges_subsample = 1\nshow_graphs = False\nshow_plots = False\n\n#  ------ Create subsampled graph for visualisation and complete for analysis\ng_initial = rcn2nx( rcn, neurons_subsample=neurons_subsample, subsample_attractors=True,\n                    edges_subsample=edges_subsample,\n                    output_filename='initial' )\nrcn2nx( rcn, output_filename='initial_complete' )\nnx2pyvis( g_initial, output_filename='initial', open_output=show_graphs )\n\n# -------- First attractor\nrcn.set_E_E_plastic( plastic=True )\nrcn.set_stimulus_e( stimulus='flat_to_E_fixed_size', frequency=rcn.stim_freq_e, offset=0 )\nrcn.set_stimulus_i( stimulus='flat_to_I', frequency=rcn.stim_freq_i )\nrcn.run_net( period=2 )\n\ng_first = rcn2nx( rcn, neurons_subsample=neurons_subsample, subsample_attractors=True,\n                  edges_subsample=edges_subsample,\n                  output_filename='first' )\nrcn2nx( rcn, output_filename='first_complete' )\nnx2pyvis( g_first, output_filename='first', open_output=show_graphs )\n\ncomment = '---- First attractor learned'\nprint( comment )\nprint( 'Attractor inhibition',\n       attractor_statistics( g_first, 'inhibition',\n                             comment=comment + f' (subsample=({neurons_subsample},{edges_subsample}))' ) )\nprint( 'Attractor excitation',\n       attractor_statistics( g_first, 'excitation',\n                             comment=comment + f' (subsample=({neurons_subsample},{edges_subsample}))' ) )\nprint( 'Attractor self-excitation',\n       attractor_statistics( g_first, 'self-excitation',\n                             comment=comment + f' (subsample=({neurons_subsample},{edges_subsample}))' ) )\nprint( 'Attractor connectivity',\n       attractor_connectivity( g_first, comment=comment + f' (subsample=({neurons_subsample},{edges_subsample}))' ) )\nprint( 'Attractor algebraic connectivity',\n       attractor_algebraic_connectivity( g_first,\n                                         comment=comment + f' (subsample=({neurons_subsample},{edges_subsample}))' ) )\n\n# --------- Second attractor\nrcn.stimulus_pulse_duration = 5 * second\nrcn.set_stimulus_e( stimulus='flat_to_E_fixed_size', frequency=rcn.stim_freq_e, offset=100 )\nrcn.set_stimulus_i( stimulus='flat_to_I', frequency=rcn.stim_freq_i )\nrcn.run_net( period=2 )\n\ng_second = rcn2nx( rcn, neurons_subsample=neurons_subsample, subsample_attractors=True,\n                   edges_subsample=edges_subsample,\n                   output_filename='second' )\nrcn2nx( rcn, output_filename='second_complete' )\nnx2pyvis( g_second, output_filename='second', open_output=show_graphs )\n\ncomment = '---- Second attractor learned'\nprint( comment )\nprint( 'Attractor inhibition',\n       attractor_statistics( g_second, 'inhibition',\n                             comment=comment + f' (subsample=({neurons_subsample},{edges_subsample}))' ) )\nprint( 'Attractor excitation',\n       attractor_statistics( g_second, 'excitation',\n                             comment=comment + f' (subsample=({neurons_subsample},{edges_subsample}))' ) )\nprint( 'Attractor self-excitation',\n       attractor_statistics( g_second, 'self-excitation',\n                             comment=comment + f' (subsample=({neurons_subsample},{edges_subsample}))' ) )\nprint( 'Attractor connectivity',\n       attractor_connectivity( g_second, comment=comment + f' (subsample=({neurons_subsample},{edges_subsample}))' ) )\nprint( 'Attractor algebraic connectivity',\n       attractor_algebraic_connectivity( g_second,\n                                         comment=comment + f' (subsample=({neurons_subsample},{edges_subsample}))' ) )\n\n# TODO save plots and graphs in same RCN directory\nplot_rcn_spiketrains_histograms(\n        Einp_spks=rcn.get_Einp_spks()[ 0 ],\n        Einp_ids=rcn.get_Einp_spks()[ 1 ],\n        stim_E_size=rcn.stim_size_e,\n        E_pop_size=rcn.N_input_e,\n        Iinp_spks=rcn.get_Iinp_spks()[ 0 ],\n        Iinp_ids=rcn.get_Iinp_spks()[ 1 ],\n        stim_I_size=rcn.stim_size_i,\n        I_pop_size=rcn.N_input_i,\n        E_spks=rcn.get_E_spks()[ 0 ],\n        E_ids=rcn.get_E_spks()[ 1 ],\n        I_spks=rcn.get_I_spks()[ 0 ],\n        I_ids=rcn.get_I_spks()[ 1 ],\n        t_run=6,\n        path_to_plot=os.getcwd(),\n        show=show_plots )\n\nplot_SPIKE_profile( rcn )\n\n# save_graph_results()\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/graph_analysis/network_visualisation.py b/graph_analysis/network_visualisation.py
--- a/graph_analysis/network_visualisation.py	
+++ b/graph_analysis/network_visualisation.py	
@@ -27,7 +27,6 @@
 rcn = RecurrentCompetitiveNet(
         plasticity_rule=plasticity_rule,
         parameter_set=parameter_set,
-        t_run=3 * second,
         save_path=os.getcwd() )
 
 rcn.stimulus_pulse = True
@@ -50,7 +49,7 @@
 rcn.set_E_E_plastic( plastic=True )
 rcn.set_stimulus_e( stimulus='flat_to_E_fixed_size', frequency=rcn.stim_freq_e, offset=0 )
 rcn.set_stimulus_i( stimulus='flat_to_I', frequency=rcn.stim_freq_i )
-rcn.run_net( period=2 )
+rcn.run_net( duration=3, period=2 )
 
 g_first = rcn2nx( rcn, neurons_subsample=neurons_subsample, subsample_attractors=True,
                   edges_subsample=edges_subsample,
@@ -79,7 +78,7 @@
 rcn.stimulus_pulse_duration = 5 * second
 rcn.set_stimulus_e( stimulus='flat_to_E_fixed_size', frequency=rcn.stim_freq_e, offset=100 )
 rcn.set_stimulus_i( stimulus='flat_to_I', frequency=rcn.stim_freq_i )
-rcn.run_net( period=2 )
+rcn.run_net( duration=3, period=2 )
 
 g_second = rcn2nx( rcn, neurons_subsample=neurons_subsample, subsample_attractors=True,
                    edges_subsample=edges_subsample,
