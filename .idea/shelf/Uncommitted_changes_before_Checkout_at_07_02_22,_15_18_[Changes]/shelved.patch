Index: plotting_functions/spike_synchronisation.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import termios\n\nimport numpy as np\n\n\ndef save_spikes_pyspike( spikes ):\n    filename = '../graph_analysis/E_spikes.txt'\n    \n    with open( filename, 'w' ) as file:\n        file.write( '# Spikes from excitatory population\\n\\n' )\n        for v in spikes.values():\n            np.savetxt( file, np.array( v ), newline=' ' )\n            file.write( '\\n' )\n    \n    return filename\n\n\ndef video_SPIKE_profile( rcn, filename=None, sim_time=6 ):\n    pass\n\n\n# TODO measure algebraic connectivity at regular intervals and add it to plots\n# TODO look at sync in inhibitory neurons\n# TODO count de-synchronised neurons in each attractor\ndef plot_SPIKE_profile( rcn, filename=None, sim_time=6 ):\n    import os\n    import matplotlib.pyplot as plt\n    from scipy.ndimage.filters import uniform_filter1d\n    import pyspike as spk\n    \n    # -- write spikes to text file if it is not supplied or it does not exist\n    if not filename or not os.path.exists( filename ):\n        filename = save_spikes_pyspike( rcn.get_E_spks( spike_trains=True ) )\n    spks, ids = rcn.get_E_spks()\n    spike_trains = spk.load_spike_trains_from_txt( filename, edges=(0, sim_time),\n                                                   ignore_empty_lines=False )\n    \n    # -- define attractor indices\n    A1 = list( range( 0, 64 ) )\n    A2 = list( range( 100, 164 ) )\n    \n    # -- compute distance and sync profiles for the two attractors\n    spike_distance_profile_A1 = spk.spike_profile( spike_trains, indices=A1 )\n    spike_distance_profile_A2 = spk.spike_profile( spike_trains, indices=A2 )\n    spike_sync_profile_A1 = spk.spike_sync_profile( spike_trains, indices=A1 )\n    spike_sync_profile_A2 = spk.spike_sync_profile( spike_trains, indices=A2 )\n    \n    # -- make figure\n    fig = plt.figure( figsize=(30, 20) )\n    gs = plt.GridSpec( 3, 2, width_ratios=[ 4, 1 ] )\n    plt.rcParams.update( { 'font.size': 22 } )\n    mean_filter_size = 500\n    \n    # -- plot neuronal spikes with attractors in different colours\n    ax_spikes = fig.add_subplot( gs[ 0, 0 ] )\n    A1_indexes = np.argwhere( np.logical_and( ids >= A1[ 0 ], ids <= A1[ -1 ] ) )\n    A2_indexes = np.argwhere( np.logical_and( ids >= A2[ 0 ], ids <= A2[ -1 ] ) )\n    A1_spks = spks[ A1_indexes ]\n    A2_spks = spks[ A2_indexes ]\n    A1_ids = ids[ A1_indexes ]\n    A2_ids = ids[ A2_indexes ]\n    ax_spikes.plot( A1_spks, A1_ids, '.', markersize=0.5, alpha=0.5, color='orange', label='A1' )\n    ax_spikes.plot( A2_spks, A2_ids, '.', markersize=0.5, alpha=0.5, color='green', label='A2' )\n    ax_spikes.set_xlim( 0, sim_time )\n    ax_spikes.set_ylim( 0, rcn.N_input_e )\n    ax_spikes.set_xlabel( 'Time (s)', labelpad=10 )\n    ax_spikes.set_ylabel( 'Neuron ID' )\n    ax_spikes.set_title( 'Neuronal spikes' )\n    ax_spikes.legend()\n    \n    # -- add stimulus presentation markers\n    trans = ax_spikes.get_xaxis_transform()\n    ax_spikes.annotate( 'Stimulus 1', xy=(1, -.1), xycoords=trans, ha=\"center\", va=\"top\", color='orange' )\n    ax_spikes.plot( [ 0.1, 1.9 ], [ -.08, -.08 ], linewidth=5, color=\"orange\", transform=trans, clip_on=False )\n    ax_spikes.annotate( 'Delay 1', xy=(2.5, -.1), xycoords=trans, ha=\"center\", va=\"top\", color='orange' )\n    ax_spikes.plot( [ 2.1, 2.9 ], [ -.08, -.08 ], linewidth=5, color=\"orange\", transform=trans, clip_on=False )\n    ax_spikes.annotate( 'Stimulus 2', xy=(4, -.1), xycoords=trans, ha=\"center\", va=\"top\", color='green' )\n    ax_spikes.plot( [ 3.1, 4.9 ], [ -.08, -.08 ], linewidth=5, color=\"green\", transform=trans, clip_on=False )\n    ax_spikes.annotate( 'Delay 2', xy=(5.5, -.1), xycoords=trans, ha=\"center\", va=\"top\", color='green' )\n    ax_spikes.plot( [ 5.1, 5.9 ], [ -.08, -.08 ], linewidth=5, color=\"green\", transform=trans, clip_on=False )\n    \n    # -- plot spike distance profile\n    ax_distance = fig.add_subplot( gs[ 1, 0 ] )\n    x, y = spike_distance_profile_A1.get_plottable_data()\n    ax_distance.plot( x, y, '--', color='orange', label='A1' )\n    y_smooth = uniform_filter1d( y, size=mean_filter_size )\n    ax_distance.plot( x, y_smooth, '.', markersize=0.5, color='orange' )\n    x, y = spike_distance_profile_A2.get_plottable_data()\n    ax_distance.plot( x, y, '--', color='green', label='A2' )\n    y_smooth = uniform_filter1d( y, size=mean_filter_size )\n    ax_distance.plot( x, y_smooth, '.', markersize=0.5, color='green' )\n    ax_distance.set_xlim( 0, sim_time )\n    ax_distance.set_ylim( 0, 1 )\n    ax_distance.set_xlabel( 'Time (s)', labelpad=10 )\n    ax_distance.set_ylabel( 'SPIKE-distance' )\n    ax_distance.set_title( 'SPIKE-distance profile' )\n    ax_distance.legend()\n    \n    # -- add average measure markers\n    trans = ax_distance.get_xaxis_transform()\n    ax_distance.annotate( f'{spk.spike_distance( spike_trains, indices=A1, interval=(0, 2) ):.5f}',\n                          xy=(1, -.1), xycoords=trans, ha=\"center\", va=\"top\", color='orange' )\n    ax_distance.plot( [ 0, 2 ], [ -.08, -.08 ], linewidth=5, color=\"orange\", transform=trans, clip_on=False )\n    ax_distance.annotate( f'{spk.spike_distance( spike_trains, indices=A1, interval=(2, 3) ):.5f}',\n                          xy=(2.5, -.1), xycoords=trans, ha=\"center\", va=\"top\", color='orange' )\n    ax_distance.plot( [ 2.1, 2.9 ], [ -.08, -.08 ], linewidth=5, color=\"orange\", transform=trans, clip_on=False )\n    ax_distance.annotate( f'{spk.spike_distance( spike_trains, indices=A2, interval=(3, 5) ):.5f}',\n                          xy=(4, -.1), xycoords=trans, ha=\"center\", va=\"top\", color='green' )\n    ax_distance.plot( [ 3, 5 ], [ -.08, -.08 ], linewidth=5, color=\"green\", transform=trans, clip_on=False )\n    ax_distance.annotate( f'{spk.spike_distance( spike_trains, indices=A2, interval=(5, 6) ):.5f}',\n                          xy=(5.5, -.1), xycoords=trans, ha=\"center\", va=\"top\", color='green' )\n    ax_distance.plot( [ 5.1, 5.9 ], [ -.08, -.08 ], linewidth=5, color=\"green\", transform=trans, clip_on=False )\n    \n    ax_distance_matrix = fig.add_subplot( gs[ 1, 1 ] )\n    spike_distance = spk.spike_distance_matrix( spike_trains )\n    im1 = ax_distance_matrix.imshow( spike_distance, vmin=0, vmax=1, interpolation='none' )\n    # ax_distance_matrix.set_clim( 0, 1 )\n    fig.colorbar( im1, ax=ax_distance_matrix )\n    ax_distance_matrix.set_title( \"SPIKE-distance matrix\" )\n    \n    # -- plot spike sync profile\n    ax_sync = fig.add_subplot( gs[ 2, 0 ] )\n    x, y = spike_sync_profile_A1.get_plottable_data()\n    ax_sync.plot( x, y, '--', color='orange', alpha=0.5, label='A1' )\n    y_smooth = uniform_filter1d( y, size=mean_filter_size )\n    ax_sync.plot( x, y_smooth, '.', markersize=0.5, color='orange' )\n    x, y = spike_sync_profile_A2.get_plottable_data()\n    ax_sync.plot( x, y, '--', color='green', alpha=0.5, label='A2' )\n    y_smooth = uniform_filter1d( y, size=mean_filter_size )\n    ax_sync.plot( x, y_smooth, '.', markersize=0.5, color='green' )\n    ax_sync.set_xlim( 0, sim_time )\n    ax_sync.set_ylim( 0, 1 )\n    ax_sync.set_xlabel( 'Time (s)', labelpad=10 )\n    ax_sync.set_ylabel( 'SPIKE-sync' )\n    ax_sync.set_title( 'SPIKE-sync profile' )\n    ax_sync.legend()\n    \n    # -- add average measure markers\n    trans = ax_sync.get_xaxis_transform()\n    ax_sync.annotate( f'{spk.spike_sync( spike_trains, indices=A1, interval=(0, 2) ):.5f}',\n                      xy=(1, -.1), xycoords=trans, ha=\"center\", va=\"top\", color='orange' )\n    ax_sync.plot( [ 0, 2 ], [ -.08, -.08 ], linewidth=5, color=\"orange\", transform=trans, clip_on=False )\n    ax_sync.annotate( f'{spk.spike_sync( spike_trains, indices=A1, interval=(2, 3) ):.5f}',\n                      xy=(2.5, -.1), xycoords=trans, ha=\"center\", va=\"top\", color='orange' )\n    ax_sync.plot( [ 2.1, 2.9 ], [ -.08, -.08 ], linewidth=5, color=\"orange\", transform=trans, clip_on=False )\n    ax_sync.annotate( f'{spk.spike_sync( spike_trains, indices=A2, interval=(3, 5) ):.5f}',\n                      xy=(4, -.1), xycoords=trans, ha=\"center\", va=\"top\", color='green' )\n    ax_sync.plot( [ 3, 5 ], [ -.08, -.08 ], linewidth=5, color=\"green\", transform=trans, clip_on=False )\n    ax_sync.annotate( f'{spk.spike_sync( spike_trains, indices=A2, interval=(5, 6) ):.5f}',\n                      xy=(5.5, -.1), xycoords=trans, ha=\"center\", va=\"top\", color='green' )\n    ax_sync.plot( [ 5.1, 5.9 ], [ -.08, -.08 ], linewidth=5, color=\"green\", transform=trans, clip_on=False )\n    \n    ax_sync_matrix = fig.add_subplot( gs[ 2, 1 ] )\n    spike_sync = spk.spike_sync_matrix( spike_trains )\n    im1 = ax_sync_matrix.imshow( spike_sync, vmin=0, vmax=1, interpolation='none' )\n    # ax_sync_matrix.set_clim( 0, 1 )\n    fig.colorbar( im1, ax=ax_sync_matrix )\n    ax_sync_matrix.set_title( \"SPIKE-sync matrix\" )\n    \n    # -- figure adjustments\n    plt.tight_layout()\n    \n    fig.show()\n    fig.savefig( './attractor_synchronisation.pdf',\n                 bbox_inches='tight' )\n    \n    # print( \"Average SPIKE-distance within A1 (0, 2)s:\",\n    #        spk.spike_distance( spike_trains, indices=A1, interval=(0, 2) ) )\n    # print( \"Average SPIKE-distance within A1 (2, 3)s:\",\n    #        spk.spike_distance( spike_trains, indices=A1, interval=(2, 3) ) )\n    # print( \"Average SPIKE-distance within A2 (3, 5)s:\",\n    #        spk.spike_distance( spike_trains, indices=A2, interval=(3, 5) ) )\n    # print( \"Average SPIKE-distance within A2 (5, 6)s:\",\n    #        spk.spike_distance( spike_trains, indices=A2, interval=(5, 6) ) )\n    # print( \"Average SPIKE-sync within A1 (0, 2)s:\", spk.spike_sync( spike_trains, indices=A1, interval=(0, 2) ) )\n    # print( \"Average SPIKE-sync within A1 (2, 3)s:\", spk.spike_sync( spike_trains, indices=A1, interval=(2, 3) ) )\n    # print( \"Average SPIKE-sync within A2 (3, 5)s:\", spk.spike_sync( spike_trains, indices=A2, interval=(3, 5) ) )\n    # print( \"Average SPIKE-sync within A2 (5, 6)s:\", spk.spike_sync( spike_trains, indices=A2, interval=(5, 6) ) )\n
===================================================================
diff --git a/plotting_functions/spike_synchronisation.py b/plotting_functions/spike_synchronisation.py
--- a/plotting_functions/spike_synchronisation.py	
+++ b/plotting_functions/spike_synchronisation.py	
@@ -107,6 +107,7 @@
     ax_distance.annotate( f'{spk.spike_distance( spike_trains, indices=A2, interval=(3, 5) ):.5f}',
                           xy=(4, -.1), xycoords=trans, ha="center", va="top", color='green' )
     ax_distance.plot( [ 3, 5 ], [ -.08, -.08 ], linewidth=5, color="green", transform=trans, clip_on=False )
+    # TODO next line prints a ton of stuff for some reason
     ax_distance.annotate( f'{spk.spike_distance( spike_trains, indices=A2, interval=(5, 6) ):.5f}',
                           xy=(5.5, -.1), xycoords=trans, ha="center", va="top", color='green' )
     ax_distance.plot( [ 5.1, 5.9 ], [ -.08, -.08 ], linewidth=5, color="green", transform=trans, clip_on=False )
